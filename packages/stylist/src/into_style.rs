use std::borrow::Cow;

use crate::ast::Sheet;
use crate::GlobalStyle;
use crate::Style;

/// A struct that can be turned into a [`Style`] or [`GlobalStyle`], it is usually generated by [`css!`](crate::css) props.
///
/// ```rust
/// use stylist::IntoStyle;
/// use yew::prelude::*;
/// use stylist::yew::Global;
///
/// let s: IntoStyle = IntoStyle::String("color: red;".into());
///
/// let rendered = html! {<div class=s.clone() />};
///
/// let global_rendered = html! {<Global css=s />};
/// ```
#[derive(Debug, Clone)]
pub enum IntoStyle {
    String(Cow<'static, str>),
    Sheet(Cow<'static, Sheet>),
}

impl IntoStyle {
    pub fn to_style(&self) -> Style {
        Style::new(self.to_sheet().as_ref()).expect("Failed to create style")
    }

    pub fn to_global_style(&self) -> GlobalStyle {
        GlobalStyle::new(self.to_sheet().as_ref()).expect("Failed to create style")
    }

    pub fn to_sheet(&self) -> Cow<'static, Sheet> {
        match self {
            Self::Sheet(ref m) => m.clone(),
            Self::String(ref m) => Cow::Owned(m.parse::<Sheet>().expect("Failed to parse style")),
        }
    }
}

impl From<String> for IntoStyle {
    fn from(other: String) -> IntoStyle {
        IntoStyle::String(other.into())
    }
}

impl From<&'static str> for IntoStyle {
    fn from(other: &'static str) -> IntoStyle {
        IntoStyle::String(other.into())
    }
}

impl From<Cow<'static, str>> for IntoStyle {
    fn from(other: Cow<'static, str>) -> IntoStyle {
        IntoStyle::String(other)
    }
}

impl From<Sheet> for IntoStyle {
    fn from(other: Sheet) -> IntoStyle {
        IntoStyle::Sheet(Cow::Owned(other))
    }
}

impl From<&'static Sheet> for IntoStyle {
    fn from(other: &'static Sheet) -> IntoStyle {
        IntoStyle::Sheet(Cow::Borrowed(other))
    }
}

impl From<Cow<'static, Sheet>> for IntoStyle {
    fn from(other: Cow<'static, Sheet>) -> IntoStyle {
        IntoStyle::Sheet(other)
    }
}
